<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AgeIsOutOfLimits" xml:space="preserve">
    <value>Das Alter des Spielers muss zwischen {0} und {1} Jahren liegen</value>
  </data>
  <data name="AnnouncementOfWinner" xml:space="preserve">
    <value>Spieler #{0} ({1}) hat gewonnen</value>
  </data>
  <data name="AskForCommand" xml:space="preserve">
    <value>Geben Sie den Befehl ein:</value>
  </data>
  <data name="AskForNewGame" xml:space="preserve">
    <value>Möchten Sie ein neues Tic-Tac-Toe-Spiel starten? {0} Drücken Sie die Eingabetaste, um zu starten, oder eine andere Taste, um zu beenden</value>
  </data>
  <data name="AskForPlayerInfo" xml:space="preserve">
    <value>Spieler #{0} geben Sie Ihre ID ein Name Alter wenn Sie bereits registriert sind oder Name Alter wenn Sie noch nicht registriert sind</value>
  </data>
  <data name="AskForPlayerTurn" xml:space="preserve">
    <value>Spieler #{0} ({1}) Geben Sie zwei Zahlen im Bereich [1-{2}] ein:</value>
  </data>
  <data name="CommandExecuted" xml:space="preserve">
    <value>Вer Befehl wurde ausgeführt und eine Datei mit dem Namen {0} wurde erstellt. Es ist Pfad: {1}</value>
  </data>
  <data name="CordinatesOutOfRange" xml:space="preserve">
    <value>Die Koordinaten außerhalb der Feldgrenzen müssen zwei Zahlen zwischen 1 und {0} sein</value>
  </data>
  <data name="Draw" xml:space="preserve">
    <value>Unentschieden</value>
  </data>
  <data name="EmptyPlayerName" xml:space="preserve">
    <value>Der Name des Spielers darf nicht leer sein oder nur Leerzeichen enthalten</value>
  </data>
  <data name="GenerateAllResultsDescription" xml:space="preserve">
    <value>Es wird eine JSON-Berichtsdatei erstellt, die die Ergebnisse ALLER Spiele mit Spielerinformationen anzeigt</value>
  </data>
  <data name="GenerateLastGameResultDescription" xml:space="preserve">
    <value>Es wird eine JSON-Berichtsdatei erstellt, die das Ergebnis des letzten Spiels anzeigt</value>
  </data>
  <data name="GenerateResultsForCurrentPlayersDescription" xml:space="preserve">
    <value>Es wird eine JSON-Berichtsdatei erstellt, die die Ergebnisse aller Spiele für die in der aktuellen Sitzung angegebenen Spieler anzeigt</value>
  </data>
  <data name="HelpDescription" xml:space="preserve">
    <value>Zeigt alle verfügbaren Befehle und Beschreibungen auf dem Bildschirm an</value>
  </data>
  <data name="IdIsOccupied" xml:space="preserve">
    <value>Id = {0} ist bereits von einem anderen Spieler besetzt</value>
  </data>
  <data name="InvalidPlayerInfo" xml:space="preserve">
    <value>Falsche Informationen vom Spieler:</value>
  </data>
  <data name="KeyIsForValue" xml:space="preserve">
    <value>{0} für {1}</value>
  </data>
  <data name="LesserAge" xml:space="preserve">
    <value>Ihr Alter kann nicht kleiner sein als zuvor</value>
  </data>
  <data name="MarkedSpot" xml:space="preserve">
    <value>Dieser Käfig ist bereits besetzt, probieren Sie einen anderen aus</value>
  </data>
  <data name="NecessaryAbbreviation" xml:space="preserve">
    <value>Geben Sie die gewünschte Abkürzung ein, um eine Sprache auszuwählen</value>
  </data>
  <data name="NullAbbreviation" xml:space="preserve">
    <value>Die Abkürzung kann nicht null sein</value>
  </data>
  <data name="NullCommand" xml:space="preserve">
    <value>Befehl darf nicht null sein</value>
  </data>
  <data name="NullPlayerInfo" xml:space="preserve">
    <value>Spielerinformationen können nicht null sein</value>
  </data>
  <data name="NullPlayerName" xml:space="preserve">
    <value>Der Name des Spielers darf nicht null sein</value>
  </data>
  <data name="NullPlayerTurnInfo" xml:space="preserve">
    <value>Fortschrittsinformationen können nicht null sein</value>
  </data>
  <data name="PlayerNameLengthIsOutOfLimits" xml:space="preserve">
    <value>Der Name des Spielers muss zwischen {0} und {1} Zeichen lang sein</value>
  </data>
  <data name="SkipDescription" xml:space="preserve">
    <value>Wenn Sie keine Befehle mehr eingeben möchten</value>
  </data>
  <data name="SkippedTurn" xml:space="preserve">
    <value>Du hast {0} Fehler hintereinander gemacht, dein Zug wird übersprungen</value>
  </data>
  <data name="string1" xml:space="preserve">
    <value />
  </data>
  <data name="String2" xml:space="preserve">
    <value />
  </data>
  <data name="SuccessfullRegistation" xml:space="preserve">
    <value>Die Registrierung war erfolgreich, {0} Ihre Id = {1} erinnere dich daran!</value>
  </data>
  <data name="UnknownAbbreviation" xml:space="preserve">
    <value>Es gibt keine verfügbare Lokalisierung mit dieser Abkürzung ({0})</value>
  </data>
  <data name="UnknownCommand" xml:space="preserve">
    <value>Es gibt keine Befehle mit dem Namen {0} in der Befehlsliste. sie können den Befehl /help verwenden, um alle verfügbaren Befehle anzuzeigen</value>
  </data>
  <data name="UnknownPlayer" xml:space="preserve">
    <value>Unter den registrierten Spielern wurde kein vergleichbares gefunden, überprüfen Sie die Richtigkeit der Dateneingabe oder geben Sie Ihren Namen ein Alter ein</value>
  </data>
  <data name="WrongFormatOfPlayerInfo" xml:space="preserve">
    <value>Das Format der Spielerinformationen ist ungültig, es muss eine ID sein Name Alter wenn Sie bereits registriert sind, oder ein Name Alter wenn Sie noch nicht registriert sind</value>
  </data>
  <data name="WrongFormatOfTurnInfo" xml:space="preserve">
    <value>Das Format der Fortschrittsinformationen ist ungültig, es müssen zwei Zahlen zwischen 1 und {0} vorliegen</value>
  </data>
</root>